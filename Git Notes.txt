==================
|| Git Commands ||
==================

#to add a new file:
```````````````````
	git add License.txt notes.txt
	-->these files will be added to staging area & will appear in git bash in green colored

#to add all files of a certain format:
``````````````````````````````````````
		git add *.java
		--> this adds every .java(extension) file resides in this directory

# short view of git status:
```````````````````````````
	git status -s
	
# to add all files:
``````````````````
	git add .
	-->here (.) means all possible names & extensions

# write a commit message:
`````````````````````````
	git commit -m "message"

# get shortcut of a command:
````````````````````````````
	git status --help	or,
	git status -h
	
# commit changes using one command line:
````````````````````````````````````````
	git commit -a -m "commit message"
	
# removing file from staging area:
	git rm --cached .classpath
	--> deleting file from staging area but keep that file in directory
	
# removing directory from staging area:
	git rm -r --cached bin/
	--> deleting directory from staging area but keep that file in directory
	
# creating a git ignore file:
	touch .gitignore
	--> git ignore for different languages https://github.com/github/gitignore
	
# opening gitignore file using git bash:
	nano .gitignore 
	--> nano is a text editor for the Unix like computer system
	
# to check git commit history:
	git log
	--> checks the commit history
	
# limit the number of commit:
	git log -3
	--> it'll show last 3 commits
	
# to check commit message & cheksum:
	git log --pretty=oneline
	
# to remove last commmit:
		git commit --amend 
		--> a text editor must be set as default 

# to delete a global default from default config:
	git config --global --unset core.editor
	
# if it has more than one config for one varibale:
	git config --global --unset-all core.editor
	
	